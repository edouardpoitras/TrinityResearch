// Graph Engine
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

using DHT.GE.Server.TSL.Protocol;

using Trinity;
using Trinity.Core.Lib;
using Trinity.Diagnostics;
using Trinity.Extension;
using Trinity.Network.Messaging;
using Trinity.TSL.Lib;

namespace DHT.GE.Server.Runtime
{
    [AutoRegisteredCommunicationModule]
    public class DHTServerRuntimeModule : DHTServerBase
    {
        #region Overrides of CommunicationModule

        /// <summary>
        /// Gets the name of the module.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetModuleName
        public override string GetModuleName()
        {
            return nameof(DHTServerRuntimeModule);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DHTServerRuntimeModule"/> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public DHTServerRuntimeModule()
        {
            if (Global.CommunicationInstance != null)
            {
                Global.CommunicationInstance.UnhandledException += CommunicationInstance_UnhandledException;
                Global.CommunicationInstance.Started += CommunicationInstance_Started;
            }

            this.Started += OnStarted;
        }

        /// <summary>
        /// Called when [started].
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for OnStarted
        private void OnStarted()
        {
            Log.WriteLine("Graph Engine Symmetric DHTServerRuntimeModule is available");
        }

        /// <summary>
        /// Communications the instance started.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CommunicationInstance_Started
        private void CommunicationInstance_Started()
        {
            Log.WriteLine("Graph Engine Symmetric Communications Instance has started and is available");
        }

        /// <summary>
        /// Handles the UnhandledException event of the CommunicationInstance control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MessagingUnhandledExceptionEventArgs"/> instance containing the event data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for CommunicationInstance_UnhandledException
        private void CommunicationInstance_UnhandledException(object sender, MessagingUnhandledExceptionEventArgs e)
        {
            Log.WriteLine($"{nameof(DHTServerRuntimeModule)} DHTServer Symmetric Runtime has encountered an unexpected exception! Services may have been degraded.");
            Log.WriteLine(e.ExceptionObject.Message);
        }

        #endregion

        #region Overrides of DHTServerBase

        /// <summary>
        /// Gets the server identifier by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetServerIdByKey
        public static int GetServerIdByKey(string key)
        {
            Log.WriteLine($"Incoming Key: {key}");

            var keyTransform = Global.CloudStorage.GetPartitionIdByCellId(HashHelper.HashString2Int64(key));

            Log.WriteLine($"GE DHT Server Partition {keyTransform} will perform work!");

            return keyTransform;
        }

        /// <summary>
        /// Gets the handler.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="response">The response.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetHandler
        public override void GetHandler(GetMessageReader request, GetResponseWriter response)
        {
            Log.WriteLine($"Working from GE DHT Server: {Global.MyPartitionId}");

            long cellId = HashHelper.HashString2Int64(request.Key);

            Log.WriteLine($"DHTServer GetHandler called. GE CellId value: {cellId}");

            response.IsFound = false;

            // Call the GE LocalStorage to get the cell via the UseBucketCell method; very cool method
            // This method will create a new cell if it doesn't exist and the UseBucketCell method is
            // an active transaction.  If the cell does exist, it will be returned. NOTE: The cell
            // will be locked for the duration of the transaction and the cell is dynamically updated

            using var cell = Global.LocalStorage.UseBucketCell(cellId, CellAccessOptions.ReturnNullOnCellNotFound);

            if (cell is null)
                return;

            int count = cell.KVList.Count;

            for (var i = 0; i < count; i++)
            {
                if (cell.KVList[i].Key != request.Key)
                    continue;

                response.IsFound = true;
                response.Value = cell.KVList[i].Value;

                break;
            }
        }

        /// <summary>
        /// Sets the handler.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetHandler
        public override void SetHandler(SetMessageReader request)
        {
            Log.WriteLine($"Working from GE DHT Server: {Global.CloudStorage.MyPartitionId}");

            long cellId = HashHelper.HashString2Int64(request.Key);

            Log.WriteLine($"DHTServer SetHandler called. GE CellId value: {cellId}");

            if (Global.LocalStorage.IsBucketCell(cellId))
            {
                Log.WriteLine($"GE CellId value: {cellId} is a bucket cell. " +
                    $"Let's try to Update the Bucket Node in this Local MemoryCloud");

                // Let the existing bucket node for update

                using var existingBucketNode = Global.LocalStorage.UseBucketCell(cellId, CellAccessOptions.StrongLogAhead);

                TryToUpdateKVListForBucket(request, existingBucketNode);
            }
            else
            {
                Log.WriteLine($"GE CellId value: {cellId} is not a bucket cell");

                // We did not find a bucket node for this cell id, so let's create a new bucket node

                var newBucketCell = new BucketCell(cellId); // This new BucketCell is empty

                if (Global.LocalStorage.SaveBucketCell(CellAccessOptions.StrongLogAhead, newBucketCell.CellId, newBucketCell) is true)
                {
                    // Let the new bucket node for update

                    using var newBucketNode = Global.LocalStorage.UseBucketCell(cellId, CellAccessOptions.StrongLogAhead);

                    // Add the new KVPair to the KVList

                    TryToUpdateKVListForBucket(request, newBucketNode);
                }
            }
        }

        /// <summary>
        /// Helper method to update the KVList in an existing BucketCell
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cell"></param>
        private static void TryToUpdateKVListForBucket(SetMessageReader request, BucketCell_Accessor cell)
        {
            int count = cell.KVList.Count;

            int index = -1;

            for (var i = 0; i < count; i++)
            {
                if (cell.KVList[i].Key != request.Key)
                    continue;

                index = i;

                break;
            }

            if (index != -1)
            {
                cell.KVList[index].Value = request.Value;
            }
            else
                cell.KVList.Add(new KVPair(request.Key, request.Value));
        }

        #endregion
    }
}

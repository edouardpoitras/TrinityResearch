using System.Reactive.Linq;
using DHT.GE.Server.Runtime;

using Trinity;
using Trinity.Client.TrinityClientModule;
using Trinity.Diagnostics;
using Trinity.Network;
using Trinity.Network.Messaging;
using Trinity.Storage;

namespace DHT.GE.Server
{
    internal static class Program
    {
        private static TrinityServer? DHTServer
        {
            get; set;
        }

        static void Main(string[] args)
        {
            var servers = args[0].Trim().Split(',');
            var dhtServerModule = DHTServerConfigandInit(servers);

            // Keep the server running

            while (true)
            {
                Thread.Sleep(1000);

                // dhtServerModule.
            }
        }

        /// <summary>
        /// DHTs the server Configuration and initialize.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DHTServerConfigandInit
        private static DHTServerRuntimeModule DHTServerConfigandInit(string[] servers)
        {
            // You could load the config file here.
            //TrinityConfig.LoadConfig(config);
            TrinityConfig.CurrentRunningMode = RunningMode.Server;
            // We're setting the cluster config directly instead.
            foreach (string server in servers)
            {
                string[] split = server.Split(":");
                TrinityConfig.AddServer(new ServerInfo(split[0], Int32.Parse(split[1]), null, LogLevel.Info));
            }

            DHTServer = new TrinityServer();

            if (Global.LocalStorage is not null)
            {
                DHTServer.UnhandledException += DHTServerOnUnhandledException;
                DHTServer.Started += DHTServerOnStarted;

                if (Global.CloudStorage is { } cloudStorage)
                {
                    cloudStorage.ServerConnected += DHTCloudStorage_ServerConnected;
                }
            }

            // Use teh GE API to fetch some useful meta data about the server

            var registeredModuleTypes = DHTServer.GetRegisteredCommunicationModuleTypes();

            var moduleTypes = registeredModuleTypes as Type[] ?? registeredModuleTypes.ToArray();

            // GE-style Dependency Injection; this is the equivalent of the TrinityClientModule
            // and grants us access to the symmetric client-side API

            if (!moduleTypes.Contains(typeof(TrinityClientModule)))
            {
                DHTServer.RegisterCommunicationModule<TrinityClientModule>();
            }

            // GE-style Dependency Injection; this is the equivalent of the DHTServerRuntimeModule
            // and grants us access to the symmetric server-side API

            if (!moduleTypes.Contains(typeof(DHTServerRuntimeModule)))
            {
                DHTServer.RegisterCommunicationModule<DHTServerRuntimeModule>();
            }

            // Okay now we can start the server

            DHTServer.Start();

            // Our GE DHT Server has been started and we need to reload the storage

            ReloadMemoryCloud();

            // Let's materialize the server-side runtime module so that we can access the
            // the GE API for the server-side and our local methods

            return DHTServer.GetCommunicationModule<DHTServerRuntimeModule>();
        }

        /// <summary>
        /// Reloads the memory cloud.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ReloadMemoryCloud
        private static void ReloadMemoryCloud()
        {
            switch (Global.LocalStorage)
            {
                case null:
                    break;
                default:
                    Global.LocalStorage.LoadStorage();
                    break;
            }
        }

        /// <summary>
        /// Servers the side runtime started.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ServerSideRuntime_Started
        private static void ServerSideRuntime_Started()
        {
            //Log.WriteLine(LogLevel.Info, "Graph Engine App Server is Running");
            Log.WriteLine("Distributed Hash Table Server is up, running and waiting for DHT Client connections");
        }

        /// <summary>
        /// Handles the ServerConnected event of the DHTCloudStorage control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="RemoteStorageEventArgs"/> instance containing the event data.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DHTCloudStorage_ServerConnected
        private static void DHTCloudStorage_ServerConnected(object sender, RemoteStorageEventArgs e)
        {
            Log.WriteLine(LogLevel.Verbose, null, "Graph Engine CloudStorage Connected.");
            Log.WriteLine(LogLevel.Verbose, null, $"{e.RemoteStorage.PartitionId} is the active server Partition Id");
        }

        /// <summary>
        /// DHTs the server on started.
        /// </summary>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DHTServerOnStarted
        private static void DHTServerOnStarted()
        {
            Log.WriteLine("Graph Engine Distributed Hash Table Server is up, running and waiting for Distributed Hash Table Graph Engine Client connections");
        }

        /// <summary>
        /// DHTs the server on unhandled exception.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="MessagingUnhandledExceptionEventArgs"/> instance containing the event data.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for DHTServerOnUnhandledException
        private static void DHTServerOnUnhandledException(object sender, MessagingUnhandledExceptionEventArgs e)
        {
            var errorMessage = e.ExceptionObject.Message;

            Log.WriteLine(LogLevel.Verbose, errorMessage);
        }
    }
}

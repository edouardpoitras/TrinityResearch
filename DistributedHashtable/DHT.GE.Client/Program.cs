using DHT.GE.Server.Runtime;
using DHT.GE.Server.TSL.Protocol;

using Trinity;
using Trinity.Client;
using Trinity.Diagnostics;
using Trinity.Network.Messaging;

namespace DHT.GE.Client
{
    internal static class Program
    {
        private static TrinityClient? DHTServerModuleClient { get; set; } = null;
        private static DHTServerRuntimeModule? DHTClientRuntimeModule { get; set; } = null;

        public static void Main(string[] args)
        {
            InitializeGraphEngineClient(args[0].Trim());

            while (true)
            {
                Console.WriteLine("Please input a command (set|get):");

                string? input = Console.ReadLine()?.Trim();

                if (input != null)
                {
                    string[] fields = input.Split(new char[] { '(', ',', ')' }, StringSplitOptions.RemoveEmptyEntries);

                    if (fields.Length > 0)
                    {
                        string command = fields[0].Trim().ToLower();

                        if (GetValue(command, fields))
                            continue;

                        if (SetValue(command, fields))
                            continue;
                    }
                }

                Console.WriteLine("Please input a valid command (set|get):");
            }
        }

        /// <summary>
        /// Initializes the graph engine client.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for InitializeGraphEngineClient
        private static void InitializeGraphEngineClient(string host)
        {
            TrinityConfig.LoggingLevel = LogLevel.Info;
            TrinityConfig.CurrentRunningMode = RunningMode.Client;

            DHTServerModuleClient = new TrinityClient(host);

            DHTServerModuleClient.UnhandledException += DHTModuleClient_UnhandledException;
            DHTServerModuleClient.Started += DHTModuleClientOnStarted;

            DHTServerModuleClient.RegisterCommunicationModule<DHTServerRuntimeModule>();

            DHTServerModuleClient.Start();

            DHTClientRuntimeModule = DHTServerModuleClient.GetCommunicationModule<DHTServerRuntimeModule>();

            Log.WriteLine("Distributed Hash Table Client is Ready for Input!");
        }

        /// <summary>
        /// Trinities the triple module client on started.
        /// </summary>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TrinityTripleModuleClientOnStarted
        private static void DHTModuleClientOnStarted()
        {
            Log.WriteLine("Distributed Hash Table Client has started, Connected the Primary DHT Server!");
        }

        /// <summary>
        /// Handles the UnhandledException event of the TrinityTripleModuleClient control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MessagingUnhandledExceptionEventArgs"/> instance containing the event data.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TrinityTripleModuleClient_UnhandledException
        private static void DHTModuleClient_UnhandledException(object sender, MessagingUnhandledExceptionEventArgs e)
        {
            var offendingObject = sender as Trinity.Network.Messaging.AsynReqRspArgs;

            Log.WriteLine($"Yikes! An unexpected Trinity Networking Error has been detected: {e.ToString()}");
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <param name="fields">The fields.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetValue
        private static bool GetValue(string command, string[] fields)
        {
            if (command.Equals("get"))
            {
                if (fields.Length < 2)
                {
                    Console.WriteLine("example: get(key1) or get(\"key 2\")");
                    return true;
                }

                string key = fields[1].Trim().Trim(new char[] { '\"' });

                using var request = new GetMessageWriter(key);

                if (DHTClientRuntimeModule != null)
                {
                    using var response = DHTClientRuntimeModule.Get(DHTServerRuntimeModule.GetServerIdByKey(key), request);

                    if (response.IsFound)
                        Console.WriteLine("The value of \"{0}\" is \"{1}\"", key, response.Value);
                    else
                        Console.WriteLine("The key is not found.");
                }

                return true;
            }

            return false;
        }

        /// <summary>
        /// Sets the value.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <param name="fields">The fields.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for SetValue
        private static bool SetValue(string command, string[] fields)
        {
            if (command.Equals("set"))
            {
                if (fields.Length < 3)
                {
                    Console.WriteLine("example: set(key1, value1) or set(\"key 2\", \"value 2\")");
                    return true;
                }

                string key = fields[1].Trim().Trim(new char[] { '\"' });
                string value = fields[2].Trim().Trim(new char[] { '\"' });
                using var request = new SetMessageWriter(key, value);

                Console.WriteLine("Set the value of \"{0}\" is \"{1}\"", key, value);

                if (DHTClientRuntimeModule != null)
                    DHTClientRuntimeModule.Set(DHTServerRuntimeModule.GetServerIdByKey(key), request);

                return true;
            }

            return false;
        }
    }
}
